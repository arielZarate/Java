#BlueJ class context
comment0.params=
comment0.target=SimpleList()
comment0.text=\ \r\n\ Constructor\ por\ defecto\r\n
comment1.params=
comment1.target=Node\ getFrente()
comment1.text=\r\n\ Retorna\ la\ direcci\u00F3n\ del\ primer\ nodo.\ Servir\u00E1\ para\ que\ desde\ una\ clase\ externa\ a\ la\ lista,\ se\r\n\ pretenda\ "recorrer\ a\ mano"\ la\ lista...\r\n
comment10.params=
comment10.target=Paciente\ getLast()
comment10.text=\r\n\ \ Retorna\ (pero\ sin\ removerlo)\ el\ valor\ ubicado\ al\ final\ de\ la\ lista.\ \r\n\ \ @return\ el\ valor\ del\ \u00FAltimo\ elemento\ de\ la\ lista,\ o\ -1\ si\ la\ lista\ estaba\ vac\u00EDa.\r\n
comment11.params=
comment11.target=Paciente\ removeLast()
comment11.text=\r\n\ \ Retorna\ (y\ remueve)\ el\ valor\ ubicado\ al\ final\ de\ la\ lista.\ \r\n\ \ @return\ el\ \u00FAltimo\ elemento\ de\ la\ lista,\ o\ -1\ si\ la\ lista\ estaba\ vac\u00EDa.\r\n
comment12.params=x
comment12.target=Paciente\ search(Paciente)
comment12.text=\r\n\ Busca\ un\ Paciente\ x\ en\ la\ lista,\ y\ en\ caso\ de\ encontrarlo\ retorna\ una\ referencia\ al\ que\ estaba\ en\ la\ lista.\r\n\ Retorna\ null\ si\ x\ no\ est\u00E1\ en\ la\ lista.\ \r\n\ @param\ x\ el\ Paciente\ a\ buscar.\r\n\ @return\ una\ referencia\ al\ Paciente\ que\ coincide\ con\ x,\ o\ null\ si\ x\ no\ existe\ en\ la\ lista.\r\n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\r\n\ \ Redefine\ el\ m\u00E9todo\ toString\ heredado\ desde\ Object.\r\n\ \ @return\ el\ contenido\ de\ la\ lista\ convertido\ a\ String.\r\n
comment2.params=x
comment2.target=void\ addFirst(Paciente)
comment2.text=\r\n\ \ Inserta\ un\ nodo\ al\ principio\ de\ la\ lista.\r\n\ \ @param\ x\ el\ info\ del\ nodo\ a\ almacenar\ en\ la\ lista.\r\n
comment3.params=
comment3.target=void\ clear()
comment3.text=\r\n\ \ Remueve\ todos\ los\ elementos\ de\ la\ lista.\r\n
comment4.params=x
comment4.target=boolean\ contains(Paciente)
comment4.text=\r\n\ \ Determina\ si\ en\ la\ lista\ existe\ un\ elemento\ que\ coincida\ con\ x.\ \r\n\ \ @return\ true\ si\ x\ est\u00E1\ en\ la\ lista\ -\ false\ si\ x\ no\ est\u00E1.\r\n\ \ @param\ x\ el\ objeto\ a\ buscar.\r\n
comment5.params=
comment5.target=Paciente\ getFirst()
comment5.text=\r\n\ \ Retorna\ (pero\ sin\ removerlo)\ el\ info\ del\ nodo\ ubicado\ al\ principio\ de\ la\ lista.\ \r\n\ \ @return\ el\ info\ del\ primer\ elemento\ de\ la\ lista.\ Si\ la\ lista\ estaba\ vac\u00EDa,\ retorna\ -1.\r\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\r\n\ Retorna\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa.\r\n\ @return\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa\ -\ false\ en\ caso\ contrario.\r\n
comment7.params=
comment7.target=Paciente\ removeFirst()
comment7.text=\r\n\ \ Retorna\ (y\ remueve)\ el\ info\ del\ nodo\ ubicado\ al\ principio\ de\ la\ lista.\ \r\n\ \ @return\ el\ primer\ elemento\ de\ la\ lista.\ Si\ la\ lista\ estaba\ vac\u00EDa,\ retorna\ -1\r\n
comment8.params=x
comment8.target=void\ addInOrder(Paciente)
comment8.text=\r\n\ \ Inserta\ un\ Paciente\ en\ forma\ ordenada\ en\ la\ lista.\ Se\ supone\ que\ la\ lista\ est\u00E1\ ya\ ordenada\ \r\n\ \ (es\ decir,\ se\ supone\ que\ todas\ las\ inserciones\ fueron\ realizadas\ llamando\ a\ este\ m\u00E9todo).\ \r\n\ \ @param\ x\ el\ valor\ a\ almacenar\ en\ la\ lista.\r\n
comment9.params=x
comment9.target=void\ addLast(Paciente)
comment9.text=\r\n\ \ Inserta\ un\ valor\ al\ final\ de\ la\ lista.\ \r\n\ \ @param\ x\ el\ valor\ a\ almacenar\ en\ la\ lista.\r\n
numComments=14
