#BlueJ class context
comment0.target=SimpleList()
comment0.text=\nConstructor\ por\ defecto\n\n
comment1.target=Node\ getFrente()
comment1.text=\nRetorna\ la\ direcci\u00F3n\ del\ primer\ nodo.\ Servir\u00E1\ para\ que\ desde\ una\ clase\ externa\ a\ la\ lista,\ se\npretenda\ "recorrer\ a\ mano"\ la\ lista...\n\n
comment10.target=Alumno\ getLast()
comment10.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ valor\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ el\ valor\ del\ \u00FAltimo\ elemento\ de\ la\ lista,\ o\ -1\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment11.target=Alumno\ removeLast()
comment11.text=\nRetorna\ (y\ remueve)\ el\ valor\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ el\ \u00FAltimo\ elemento\ de\ la\ lista,\ o\ -1\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment12.params=x
comment12.target=Alumno\ search(Alumno)
comment12.text=\nBusca\ un\ Alumno\ x\ en\ la\ lista,\ y\ en\ caso\ de\ encontrarlo\ retorna\ una\ referencia\ al\ que\ estaba\ en\ la\ lista.\nRetorna\ null\ si\ x\ no\ est\u00E1\ en\ la\ lista.\ \n@param\ x\ el\ Alumno\ a\ buscar.\n@return\ una\ referencia\ al\ Alumno\ que\ coincide\ con\ x,\ o\ null\ si\ x\ no\ existe\ en\ la\ lista.\n\n
comment13.target=String\ toString()
comment13.text=\nRedefine\ el\ m\u00E9todo\ toString\ heredado\ desde\ Object.\n@return\ el\ contenido\ de\ la\ lista\ convertido\ a\ String.\n\n
comment2.params=x
comment2.target=void\ addFirst(Alumno)
comment2.text=\nInserta\ un\ nodo\ al\ principio\ de\ la\ lista.\n@param\ x\ el\ info\ del\ nodo\ a\ almacenar\ en\ la\ lista.\n\n
comment3.target=void\ clear()
comment3.text=\nRemueve\ todos\ los\ elementos\ de\ la\ lista.\n\n
comment4.params=x
comment4.target=boolean\ contains(Alumno)
comment4.text=\nDetermina\ si\ en\ la\ lista\ existe\ un\ elemento\ que\ coincida\ con\ x.\ \n@return\ true\ si\ x\ est\u00E1\ en\ la\ lista\ -\ false\ si\ x\ no\ est\u00E1.\n@param\ x\ el\ objeto\ a\ buscar.\n\n
comment5.target=Alumno\ getFirst()
comment5.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ info\ del\ nodo\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ el\ info\ del\ primer\ elemento\ de\ la\ lista.\ Si\ la\ lista\ estaba\ vac\u00EDa,\ retorna\ -1.\n\n
comment6.target=boolean\ isEmpty()
comment6.text=\nRetorna\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa.\n@return\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa\ -\ false\ en\ caso\ contrario.\n\n
comment7.target=Alumno\ removeFirst()
comment7.text=\nRetorna\ (y\ remueve)\ el\ info\ del\ nodo\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ el\ primer\ elemento\ de\ la\ lista.\ Si\ la\ lista\ estaba\ vac\u00EDa,\ retorna\ -1\n\n
comment8.params=x
comment8.target=void\ addInOrder(Alumno)
comment8.text=\nInserta\ un\ Alumno\ en\ forma\ ordenada\ en\ la\ lista.\ Se\ supone\ que\ la\ lista\ est\u00E1\ ya\ ordenada\ \n(es\ decir,\ se\ supone\ que\ todas\ las\ inserciones\ fueron\ realizadas\ llamando\ a\ este\ m\u00E9todo).\ \n@param\ x\ el\ valor\ a\ almacenar\ en\ la\ lista.\n\n
comment9.params=x
comment9.target=void\ addLast(Alumno)
comment9.text=\nInserta\ un\ valor\ al\ final\ de\ la\ lista.\ \n@param\ x\ el\ valor\ a\ almacenar\ en\ la\ lista.\n\n
numComments=14
